#! /bin/tcsh -f

set mach = hadley

#################################################################################
if ($PHASE == set_batch) then
#################################################################################

source ./Tools/ccsm_getenv || exit -1

# Determine tasks and threads for batch queue 

set max_tasks_per_node = $MAX_TASKS_PER_NODE

set maxthrds = 0
@ n = 0
foreach model ($MODELS)
  @ n = $n + 1
  if ($NTHRDS[$n] > $max_tasks_per_node ) then
     echo "ERROR, NTHRDS maximum is $max_tasks_per_node"
     echo "you have set NTHRDS = ( $NTHRDS[$n] ) - must reset"
     exit 1
  endif   
  if ($NTHRDS[$n] > $maxthrds) then
     set maxthrds = $NTHRDS[$n]
  endif
end

set ntasks_tot = `${UTILROOT}/Tools/taskmaker.pl -sumonly`

@ nodes = ${ntasks_tot} / ${max_tasks_per_node}
@ tmpValue = ${nodes} * ${max_tasks_per_node}
if( $tmpValue < ${ntasks_tot} ) then
@ nodes = $nodes + 1
endif


set queue_name = batch
if ($?QUEUE) then
  set queue_name = ${QUEUE}
endif

set time_limit = "00:59:00"
if ($CCSM_ESTCOST > 0) set time_limit = "1:59"
if ($CCSM_ESTCOST > 1) set time_limit = "3:59"

cat >! $CASEROOT/${CASE}.${mach}.run << EOF1
#! /bin/tcsh -f
#==============================================================================
#  This is a CCSM coupled model Load Leveler batch job script for $mach
#==============================================================================
#BSUB -l nodes=${nodes}:ppn=${max_tasks_per_node}:walltime=${time_limit}
#BSUB -q ${queue_name}
###BSUB -k eo
###BSUB -J $CASE
###BSUB -W ${time_limit}

limit coredumpsize 1000000
limit stacksize unlimited

EOF1


#################################################################################
else if ($PHASE == set_exe) then
#################################################################################

source ./Tools/ccsm_getenv || exit -1
set ntasks_tot = `${UTILROOT}/Tools/taskmaker.pl -sumonly`

cat >> ${CASEROOT}/${CASE}.${MACH}.run << EOF1
# -------------------------------------------------------------------------
# Run the model
# -------------------------------------------------------------------------

cd \$RUNDIR
echo "\`date\` -- CSM EXECUTION BEGINS HERE" 

set NP = ${ntasks_tot}
echo "test NP = \$NP"
if (\$USE_MPISERIAL == "FALSE") then
   # mpirun --mca btl tcp,self -np \$NP ./ccsm.exe
   mpirun --mca btl openib,self -np \$NP ./ccsm.exe
   # mpirun ./ccsm_se.exe
else
                                         ./ccsm.exe
endif

wait
echo "\`date\` -- CSM EXECUTION HAS FINISHED" 

# -------------------------------------------------------------------------
# For Postprocessing
# -------------------------------------------------------------------------

EOF1


#################################################################################
else if ($PHASE == set_larch) then
#################################################################################

if (-e ${CASEROOT}/${CASE}.${mach}.l_archive) then
   echo ERROR: generate_batch.csh file ${CASE}.${mach}.l_archive already exists in ${CASEROOT}
   exit -1
endif

# Create the archive script
touch ${CASEROOT}/${CASE}.${mach}.l_archive
chmod 775 ${CASEROOT}/${CASE}.${mach}.l_archive

cat >! $CASEROOT/${CASE}.${mach}.l_archive << EOF1
#! /bin/csh -f
#===============================================================================
#  This is a CCSM coupled model batch long term archiving script
#===============================================================================

#BSUB -n 1
#BSUB -W 3:00
#BSUB -q share
#BSUB -J $CASE.l_archive

#-----------------------------------------------------------------------
# Determine necessary environment variables
#-----------------------------------------------------------------------

cd $CASEROOT 

source ./Tools/ccsm_getenv || exit -1

#----------------------------------------------
# run the long term archiver
#----------------------------------------------

cd \$DOUT_S_ROOT
foreach dirl1 (\`/bin/ls -1\`)
    if (-d \$DOUT_S_ROOT/\${dirl1}) then
       \$CASETOOLS/ccsm_l_archive.csh \${dirl1} &
    endif
end
wait
exit 0

EOF1

#################################################################################
else
#################################################################################

    echo "mkscripts.$mach"
    echo "  PHASE setting of $PHASE is not an accepted value"
    echo "  accepted values are set_batch, set_exe and set_larch"
    exit 1

#################################################################################
endif
#################################################################################
 

