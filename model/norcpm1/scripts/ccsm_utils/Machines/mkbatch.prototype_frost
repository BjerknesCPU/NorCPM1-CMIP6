#! /bin/csh -f

set mach = prototype_frost

#################################################################################
if ($PHASE == set_batch) then
#################################################################################

source ./Tools/ccsm_getenv || exit -1

cat >! $CASEROOT/${CASE}.${mach}.run << EOF1
#! /bin/csh -f
#==============================================================================
#  This is a CCSM coupled model job script for $mach.  The job scheduler on
#  this platform does not currently support batch scripts, so this script must
#  be run by the user directly instead.  Please redirect the output from this
#  script, if desired.
#==============================================================================

EOF1


#################################################################################
else if ($PHASE == set_exe) then
#################################################################################


cat >> ${CASEROOT}/${CASE}.${MACH}.run << EOF1

# -------------------------------------------------------------------------
# Set up the model.  For the single executable, this means determining the
# total number of tasks.  determine by largest max task of any component
# -------------------------------------------------------------------------

set ntasks_tot = 0

@ n = 0
foreach model (\$MODELS)
  @ n = \$n + 1
  @ tot = (\$ROOTPE[\$n] + (\$NTASKS[\$n] * \$PSTRID[\$n]))
  if (\$tot > \$ntasks_tot) then
     set ntasks_tot = \$tot
  endif
end

@ tasks = \$ntasks_tot

# -------------------------------------------------------------------------
# Run the model
# -------------------------------------------------------------------------

cd \$RUNDIR
echo "`date` -- CSM EXECUTION BEGINS HERE"
if (\$USE_MPISERIAL == "FALSE") then
   set out=\`cqsub -n \${tasks} -e HOME=\${HOME}:LOGNAME=\${LOGNAME} -t 03:00:00 ccsm.exe\`
   echo \$out
   set jobid=\`echo \$out\`
   cqwait \$jobid
else
                                                                               ./ccsm.exe
endif
echo "`date` -- CSM EXECUTION HAS FINISHED" 

EOF1


#################################################################################
else if ($PHASE == set_larch) then
#################################################################################

if (-e ${CASEROOT}/${CASE}.${mach}.l_archive) then
   echo ERROR: generate_batch.csh file ${CASE}.${mach}.l_archive already exists in ${CASEROOT}
   exit -1
endif

# Create the archive script
touch ${CASEROOT}/${CASE}.${mach}.l_archive
chmod 775 ${CASEROOT}/${CASE}.${mach}.l_archive

set account_name = `grep -i "^${CCSMUSER}:" /etc/project.ncar | cut -f 1 -d "," | cut -f 2 -d ":" `
if (-e ~/.ccsm_proj) then
   set account_name = `head -1 ~/.ccsm_proj`
endif

cat >! $CASEROOT/${CASE}.${mach}.l_archive << EOF1
#! /bin/csh -f
#===============================================================================
#  This is a CCSM coupled model batch long term archiving script
#===============================================================================

#BSUB -n 1
#BSUB -o poe.harout.%J
#BSUB -e poe.harerr.%J
#BSUB -W 3:00
#BSUB -q share
#BSUB -J $CASE.l_archive
#BSUB -P ${account_name}

#-----------------------------------------------------------------------
# Determine necessary environment variables
#-----------------------------------------------------------------------

cd $CASEROOT 

source ./Tools/ccsm_getenv || exit -1

#----------------------------------------------
# run the long term archiver
#----------------------------------------------

cd \$DOUT_S_ROOT
foreach dirl1 (\`/bin/ls -1\`)
    if (-d \$DOUT_S_ROOT/\${dirl1}) then
       \$CASETOOLS/ccsm_l_archive.csh \${dirl1} &
    endif
end
wait
exit 0


EOF1


#################################################################################
else
#################################################################################

    echo "mkscripts.$mach"
    echo "  PHASE setting of $PHASE is not an accepted value"
    echo "  accepted values are set_batch, set_exe and set_larch"
    exit 1

#################################################################################
endif
#################################################################################
