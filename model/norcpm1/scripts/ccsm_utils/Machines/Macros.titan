#===============================================================================
# The following always need to be set
# SPMD             Whether to build in SPMD mode or not.  [values TRUE FALSE]
# SMP              Set to TRUE to enable building in SMP mode (uses OpenMP).  
# USER_CPPDEFS     CPP definitions (non platform dependent)
#
#===============================================================================
# Makefile macros for Compute Node Linux on XT3/XT4 systems, using PGI compilers
#
# Notes:  (see pgi man page & user's guide for the details)
#  -Mextend        => Allow 132-column source lines
#  -Mfixed         => Assume fixed-format source
#  -Mfree          => Assume free-format source
#
#  -byteswapio     => Swap byte-order for unformatted i/o (big/little-endian)
# 
#  -target=linux   => Specifies the target architecture to Compute Node Linux
#  -fast           => Chooses generally optimal flags for the target platform
#  -Mnovect        => Disables automatic vector pipelining
#  -Mvect=nosse    => Don't generate SSE, SSE2, 3Dnow, and prefetch instructions in loops
#  -Mflushz        => Set SSE to flush-to-zero mode (underflow) loops where possible
#  -Kieee          => Perform fp ops in strict conformance with the IEEE 754 standard. 
#                     Some optimizations disabled, slightly slower, more accurate math. 
#  -mp=nonuma      => Don't use thread/processors affinity (for NUMA architectures)
#
#  -g              => Generate symbolic debug information. Turns off optimization.
#  -gopt           => Generate information for debugger without disabling optimizations
#  -Mbounds        => Add array bounds checking
#  -Ktrap=fp       => Determine IEEE Trap conditions fp => inv,divz,ovf
#                     * inv: invalid operands
#                     * divz divide by zero
#                     * ovf: floating point overflow
#  -Mlist          => Create a listing file
#  -F              => leaves file.f for each preprocessed file.F file
#  -time           => Print execution time for each compiler step
#===============================================================================

# Note that CPPDEFS is set in Macros.cppdefs
CPPDEFS += -DLINUX -DSEQ_$(FRAMEWORK) -DFORTRANUNDERSCORE -DNO_SHR_VMATH \
           -D_USE_FLOW_CONTROL -D_NO_MPI_RSEND

ifeq ($(compile_threaded), true)
   CPPDEFS += -DTHREADED_OMP
endif

ifeq ($(strip $(MODEL)),cam)
  CPPDEFS += -DNO_R16
endif

# Note that NETCDF_DIR is obtained from invoking modules
FC            := time ftn
CC            := time cc
NETCDF_PATH   := $(NETCDF_DIR)
INC_NETCDF    := $(NETCDF_PATH)/include
LIB_NETCDF    := $(NETCDF_PATH)/lib
MOD_NETCDF    := $(NETCDF_PATH)/include
ifeq ($(USE_MPISERIAL),TRUE)
   INC_MPI    := $(CODEROOT)/utils/mct/mpi-serial
   LIB_MPI    :=
else
   INC_MPI    :=
   LIB_MPI    :=
endif
MPI_LIB_NAME  := mpich
PNETCDF_PATH  := $(PARALLEL_NETCDF_DIR)
INC_PNETCDF   := $(PNETCDF_PATH)/include
LIB_PNETCDF   := $(PNETCDF_PATH)/lib
LAPACK_LIBDIR := 

CFLAGS        := $(CPPDEFS) -target=linux -gopt -Mlist -time -fast
FIXEDFLAGS    := -Mfixed
FREEFLAGS     := -Mfree
FFLAGS        := $(CPPDEFS) -i4 -target=linux -gopt -Mlist -time -Mextend -byteswapio -Mflushz -Kieee -Ktrap=fp 
FFLAGS_OPT    := -O2 -Mvect=nosse
LDFLAGS       := -time -Wl,--allow-multiple-definition  -R/ccs/home/toepfer/mp_fix -L/ccs/home/toepfer/mp_fix -lpgc -lpgmp 
AR            := ar
MOD_SUFFIX    := mod
CONFIG_SHELL  :=
SLIBS := $(shell nc-config --flibs)
CONFIG_ARGS += LDFLAGS="$(LDFLAGS) $(SLIBS)"

#===============================================================================
# Set include paths (needed after override for any model specific builds below)
#===============================================================================

INCLDIR := -I. 
ifneq ($(strip $(INC_NETCDF)),)
INCLDIR += -I$(INC_NETCDF)
endif
ifneq ($(strip $(MOD_NETCDF)),)
INCLDIR += -I$(MOD_NETCDF)
endif
ifneq ($(strip $(INC_MPI)),)
INCLDIR += -I$(INC_MPI)
endif 
ifneq ($(strip $(INC_PNETCDF)),)
INCLDIR += -I$(INC_PNETCDF)
endif
ifeq ($(MODEL),driver)
   INCLDIR += -I$(EXEROOT)/atm/obj -I$(EXEROOT)/lnd/obj -I$(EXEROOT)/ice/obj -I$(EXEROOT)/ocn/obj -I$(EXEROOT)/glc/obj
endif

#===============================================================================
# Set model and other specific options
# NOTE - all CPPDEFS options must be defined before this point
#===============================================================================

ifeq ($(MODEL),datm)
  CFLAGS     += -O2 -Mnovect
  FFLAGS_OPT += -O2 -Mnovect -Kieee
endif
ifeq ($(MODEL),dice)
  CFLAGS     += -O2 -Mnovect
  FFLAGS_OPT += -O2 -Mnovect -Kieee
endif
ifeq ($(MODEL),dlnd)
  CFLAGS     += -O2 -Mnovect
  FFLAGS_OPT += -O2 -Mnovect -Kieee
endif
ifeq ($(MODEL),docn)
  CFLAGS     += -O2 -Mnovect
  FFLAGS_OPT += -O2 -Mnovect -Kieee
endif

ifeq ($(strip $(MODEL)),cam)
  FFLAGS       := $(CPPDEFS) -i4 -target=linux -gopt -Mlist -time -Mextend -byteswapio 
  FFLAGS_NOOPT := $(FFLAGS)
  CFLAGS     += -O2 -Mvect=nosse 
  FFLAGS_OPT += -O2 -Mvect=nosse -Kieee
endif
ifeq ($(MODEL),cice)
  CFLAGS     += -O2 -Mvect=nosse 
  FFLAGS_OPT += -O2 -Mvect=nosse -Kieee
endif
ifeq ($(MODEL),clm)
  CFLAGS     += -O2 -Mvect=nosse 
  FFLAGS_OPT += -O2 -Mvect=nosse -Kieee
endif
ifeq ($(MODEL),pop2)
  CFLAGS     += -O2 -Mvect=nosse 
  FFLAGS_OPT += -O2 -Mvect=nosse -Kieee
endif

ifeq ($(DEBUG),TRUE)
   FFLAGS       += -g -Ktrap=fp -Mbounds -Kieee
   FFLAGS_NOOPT += -g -Ktrap=fp -Mbounds -Kieee
else
   FFLAGS += $(FFLAGS_OPT)
endif

ifeq ($(compile_threaded), true)
   FFLAGS       += -mp
   FFLAGS_NOOPT += -mp
   CFLAGS       += -mp
   LDFLAGS      += -mp
endif

ifeq ($(strip $(MODEL)),cam)
# These RRTMG files cause a compiler error when using optimization.
# Until mods are made to read the data from files, just remove optimization from
# their compilation.
rrtmg_lw_k_g.o: rrtmg_lw_k_g.f90
	$(FC) -c $(CPPDEFS) $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS_NOOPT) $<
rrtmg_sw_k_g.o: rrtmg_sw_k_g.f90
	$(FC) -c $(CPPDEFS) $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS_NOOPT) $<

   # The following rules are for the COSP simulator code:

F90             := $(FC)
FC_AUTO_R8      := -r8
F90FLAGS         = $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS) $(FC_AUTO_R8)
F90FLAGS_noauto  = $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS)
F90FLAGS_fixed   = $(INCLDIR) $(INCS) $(FIXEDFLAGS) $(FFLAGS) $(FC_AUTO_R8)

array_lib.o : array_lib.f90 mrgrnk.o
	$(F90) $(F90FLAGS) -c $<

atmos_lib.o : atmos_lib.f90
	$(F90) $(F90FLAGS) -c $<

cosp.o : cosp.F90 cosp_simulator.o cosp_types.o cosp_modis_simulator.o
	$(F90) $(F90FLAGS) -c $<

cosp_constants.o : cosp_constants.F90
	$(F90) $(F90FLAGS) -c  $<

cosp_isccp_simulator.o : cosp_isccp_simulator.F90 cosp_constants.o cosp_types.o
	$(F90) $(F90FLAGS) -c  $<

cosp_lidar.o : cosp_lidar.F90 cosp_constants.o cosp_types.o
	$(F90) $(F90FLAGS) -c  $<

cosp_misr_simulator.o : cosp_misr_simulator.F90 cosp_constants.o cosp_types.o
	$(F90) $(F90FLAGS) -c  $<

cosp_modis_simulator.o : cosp_modis_simulator.F90 cosp_constants.o cosp_types.o modis_simulator.o 
	$(F90) $(F90FLAGS) -c  $<

cosp_radar.o : cosp_radar.F90 cosp_constants.o cosp_types.o radar_simulator_types.o array_lib.o atmos_lib.o format_input.o math_lib.o optics_lib.o
	$(F90) $(F90FLAGS) -c $<

cosp_simulator.o: cosp_simulator.F90 cosp_types.o cosp_radar.o cosp_lidar.o cosp_isccp_simulator.o cosp_misr_simulator.o cosp_modis_simulator.o cosp_stats.o 
	$(F90) $(F90FLAGS) -c $<

cosp_stats.o : cosp_stats.F90 cosp_constants.o cosp_types.o llnl_stats.o lmd_ipsl_stats.o
	$(F90) $(F90FLAGS) -c $<

cosp_types.o : cosp_types.F90 cosp_constants.o cosp_utils.o radar_simulator_types.o
	$(F90) $(F90FLAGS) -c  $<

cosp_utils.o : cosp_utils.F90 cosp_constants.o
	$(F90) $(F90FLAGS) -c  $<

dsd.o : dsd.f90 array_lib.o math_lib.o
	$(F90) $(F90FLAGS) -c $<

format_input.o : format_input.f90 array_lib.o
	$(F90) $(F90FLAGS) -c $<

gases.o : gases.f90
	$(F90) $(F90FLAGS) -c $<

icarus.o : icarus.f90
	$(F90) $(F90FLAGS_fixed) -c $<

lidar_simulator.o : lidar_simulator.F90
	$(F90) $(F90FLAGS) -c $<

llnl_stats.o : llnl_stats.F90 cosp_constants.o
	$(F90) $(F90FLAGS) -c $<

lmd_ipsl_stats.o : lmd_ipsl_stats.F90 llnl_stats.o
	$(F90) $(F90FLAGS) -c $<

load_hydrometeor_classes.o : load_hydrometeor_classes.f90 radar_simulator_types.o
	$(F90) $(F90FLAGS) -c $<

math_lib.o : math_lib.f90 array_lib.o mrgrnk.o
	$(F90) $(F90FLAGS) -c $<

MISR_simulator.o : MISR_simulator.f90
	$(F90) $(F90FLAGS_fixed) -c $<

modis_simulator.o : modis_simulator.F90 cosp_types.o abortutils.o
	$(F90) $(F90FLAGS) -c $<

mrgrnk.o : mrgrnk.f90
	$(F90) $(F90FLAGS_noauto) -c $<

optics_lib.o : optics_lib.f90
	$(F90) $(F90FLAGS) -c $<

pf_to_mr.o : pf_to_mr.f90
	$(F90) $(F90FLAGS_fixed) -c $<

prec_scops.o : prec_scops.f90
	$(F90) $(F90FLAGS_fixed) -c $<

radar_simulator_types.o : radar_simulator_types.f90 array_lib.o math_lib.o mrgrnk.o optics_lib.o radar_simulator_types.o
	$(F90) $(F90FLAGS) -c $<

radar_simulator.o : radar_simulator.f90 array_lib.o math_lib.o mrgrnk.o optics_lib.o radar_simulator_types.o
	$(F90) $(F90FLAGS) -c $<

scops.o : scops.f90
	$(F90) $(F90FLAGS_fixed) -c $<

zeff.o : zeff.f90 math_lib.o optics_lib.o
	$(F90) $(F90FLAGS) -c $<

endif


CONFIG_ARGS += FC="$(FC)" F90="$(FC)" --host=XK6


ifeq ($(MODEL),pio)
  ifneq ($(strip $(PIO_CONFIG_OPTS)),)
    CONFIG_ARGS += $(PIO_CONFIG_OPTS)
  endif 
  CONFIG_ARGS +=  NETCDF_PATH=$(NETCDF_PATH) FFLAGS="$(FFLAGS)" --enable-filesystem-hints=lustre 
endif

