#===============================================================================
# The following always need to be set
# SPMD             Whether to build in SPMD mode or not.  [values TRUE FALSE]
# SMP              Set to TRUE to enable building in SMP mode (uses OpenMP).  
# USER_CPPDEFS     CPP definitions (non platform dependent)
#
#===============================================================================
# Makefile macros for Compute Node Linux on XT3/XT4/XE6 systems, using PGI compilers
#
# Notes:  (see pgi man page & user's guide for the details)
#  -Mextend        => Allow 132-column source lines
#  -Mfixed         => Assume fixed-format source
#  -Mfree          => Assume free-format source
#
#  -byteswapio     => Swap byte-order for unformatted i/o (big/little-endian)
# 
#  -target=linux   => Specifies the target architecture to Compute Node Linux
#  -fast           => Chooses generally optimal flags for the target platform
#  -Mnovect        => Disables automatic vector pipelining
#  -xCORE-AVX2    => Don't generate SSE, SSE2, 3Dnow, and prefetch instructions in loops
#  -Mflushz        => Set SSE to flush-to-zero mode (underflow) loops where possible
#  -mieee-fp          => Perform fp ops in strict conformance with the IEEE 754 standard. 
#                     Some optimizations disabled, slightly slower, more accurate math. 
#  -mp=nonuma      => Don't use thread/processors affinity (for NUMA architectures)
#
#  -g              => Generate symbolic debug information. Turns off optimization.
#  -gopt           => Generate information for debugger without disabling optimizations
#  -Mbounds        => Add array bounds checking
#  -Ktrap=fp       => Determine IEEE Trap conditions fp => inv,divz,ovf
#                     * inv: invalid operands
#                     * divz divide by zero
#                     * ovf: floating point overflow
#  -Mlist          => Create a listing file
#  -F              => leaves file.f for each preprocessed file.F file
#  -time           => Print execution time for each compiler step
#===============================================================================

# Note that CPPDEFS is set in Macros.cppdefs
CPPDEFS += -DLINUX -DSEQ_$(FRAMEWORK) -DFORTRANUNDERSCORE -DNO_SHR_VMATH -D_USE_FLOW_CONTROL -D_NO_MPI_RSEND

ifeq ($(compile_threaded), true)
   CPPDEFS += -DTHREADED_OMP
endif

ifeq ($(strip $(MODEL)),cam)
  CPPDEFS += -DNO_R16
endif

# Note that NETCDF_DIR is obtained from invoking modules
FC            := mpifort -g -traceback
CC            := mpicc -g -traceback
NETCDF_PATH   := $(EBROOTNETCDF)
INC_NETCDF    := $(EBROOTNETCDFMINFORTRAN)/include
LIB_NETCDF    := $(EBROOTNETCDFMINFORTRAN)/lib
MOD_NETCDF    := $(EBROOTNETCDFMINFORTRAN)/include
INC_MPI       := $(MPI_ROOT)/include 
LIB_MPI       := $(MPI_ROOT)/lib
MPI_LIB_NAME  := mpi
PNETCDF_PATH  := 
INC_PNETCDF   :=
LIB_PNETCDF   := 
LAPACK_LIBDIR := 

CFLAGS        := $(CPPDEFS) -O2 -xCORE-AVX2 
FIXEDFLAGS    := -132
FREEFLAGS     := -FR
FFLAGS        := $(CPPDEFS) -align -fp-model source -convert big_endian -assume byterecl
FFLAGS_OPT    := -O2 -xCORE-AVX2 
LDFLAGS       := -L$(EBROOTNETCDFMINFORTRAN)/lib -lnetcdff -g
AR            := ar
MOD_SUFFIX    := mod
CONFIG_SHELL  :=

#===============================================================================
# Set include paths (needed after override for any model specific builds below)
#===============================================================================

INCLDIR := -I. 
ifneq ($(strip $(INC_NETCDF)),)
INCLDIR += -I$(INC_NETCDFF)
INCLDIR += -I$(INC_NETCDF)
endif
ifneq ($(strip $(MOD_NETCDF)),)
INCLDIR += -I$(MOD_NETCDFF)
INCLDIR += -I$(MOD_NETCDF)
endif
ifneq ($(strip $(INC_MPI)),)
INCLDIR += -I$(INC_MPI)
endif 
ifneq ($(strip $(INC_PNETCDF)),)
INCLDIR += -I$(INC_PNETCDF)
endif
ifeq ($(MODEL),driver)
   INCLDIR += -I$(EXEROOT)/atm/obj -I$(EXEROOT)/lnd/obj -I$(EXEROOT)/ice/obj -I$(EXEROOT)/ocn/obj -I$(EXEROOT)/glc/obj
endif

#===============================================================================
# Set model and other specific options
# NOTE - all CPPDEFS options must be defined before this point
#===============================================================================

ifeq ($(MODEL),datm)
  CFLAGS     += 
  FFLAGS_OPT += 
endif
ifeq ($(MODEL),dice)
  CFLAGS     += 
  FFLAGS_OPT += 
endif
ifeq ($(MODEL),dlnd)
  CFLAGS     += 
  FFLAGS_OPT += 
endif
ifeq ($(MODEL),docn)
  CFLAGS     += 
  FFLAGS_OPT += 
endif

ifeq ($(strip $(MODEL)),cam)
  FFLAGS       += -i4 -r8
  FFLAGS_NOOPT := $(FFLAGS) 
  ifneq ($(F_OPTIMIZATION_OVERRIDE),$(null))
     FFLAGS_OPT := $(F_OPTIMIZATION_OVERRIDE)
  else
     CFLAGS     += 
     FFLAGS_OPT += 
  endif
endif
ifeq ($(MODEL),cice)
  CFLAGS     += 
  FFLAGS_OPT += 
endif
ifeq ($(MODEL),clm)
  CFLAGS     += 
  FFLAGS_OPT += 
endif
ifeq ($(MODEL),pop2)
  CFLAGS     += 
  FFLAGS_OPT += 
endif
ifeq ($(MODEL),micom)
  CFLAGS     += 
  FFLAGS     += -r8 
  FFLAGS_OPT += 
endif

ifeq ($(DEBUG),TRUE)
   FFLAGS       += -g -ftrapuv -traceback 
   FFLAGS_NOOPT += -g -ftrapuv -traceback 
else
   ifneq ($(MODEL),driver)
      FFLAGS += $(FFLAGS_OPT) 
   endif
endif

ifeq ($(compile_threaded), true)
   FFLAGS       += -openmp
   FFLAGS_NOOPT += -openmp
   CFLAGS       += -openmp
   LDFLAGS      += -openmp
endif

ifeq ($(strip $(MODEL)),cam)
# These RRTMG files cause a compiler error when using optimization.
# Until mods are made to read the data from files, just remove optimization from
# their compilation.
rrtmg_lw_k_g.o: rrtmg_lw_k_g.f90
	$(FC) -c $(CPPDEFS) $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS_NOOPT) $<
rrtmg_sw_k_g.o: rrtmg_sw_k_g.f90
	$(FC) -c $(CPPDEFS) $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS_NOOPT) $<

   # The following rules are for the COSP simulator code:

F90             := $(FC)
FC_AUTO_R8      := -r8
F90FLAGS         = $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS) $(FC_AUTO_R8)
F90FLAGS_noauto  = $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS)
F90FLAGS_fixed   = $(INCLDIR) $(INCS) $(FIXEDFLAGS) $(FFLAGS) $(FC_AUTO_R8)

array_lib.o : array_lib.f90 mrgrnk.o
	$(F90) $(F90FLAGS) -c $<

atmos_lib.o : atmos_lib.f90
	$(F90) $(F90FLAGS) -c $<

cosp.o : cosp.F90 cosp_simulator.o cosp_types.o cosp_modis_simulator.o
	$(F90) $(F90FLAGS) -c $<

cosp_constants.o : cosp_constants.F90
	$(F90) $(F90FLAGS) -c  $<

cosp_isccp_simulator.o : cosp_isccp_simulator.F90 cosp_constants.o cosp_types.o
	$(F90) $(F90FLAGS) -c  $<

cosp_lidar.o : cosp_lidar.F90 cosp_constants.o cosp_types.o
	$(F90) $(F90FLAGS) -c  $<

cosp_misr_simulator.o : cosp_misr_simulator.F90 cosp_constants.o cosp_types.o
	$(F90) $(F90FLAGS) -c  $<

cosp_modis_simulator.o : cosp_modis_simulator.F90 cosp_constants.o cosp_types.o modis_simulator.o 
	$(F90) $(F90FLAGS) -c  $<

cosp_radar.o : cosp_radar.F90 cosp_constants.o cosp_types.o radar_simulator_types.o array_lib.o atmos_lib.o format_input.o math_lib.o optics_lib.o
	$(F90) $(F90FLAGS) -c $<

cosp_simulator.o: cosp_simulator.F90 cosp_types.o cosp_radar.o cosp_lidar.o cosp_isccp_simulator.o cosp_misr_simulator.o cosp_modis_simulator.o cosp_stats.o 
	$(F90) $(F90FLAGS) -c $<

cosp_stats.o : cosp_stats.F90 cosp_constants.o cosp_types.o llnl_stats.o lmd_ipsl_stats.o
	$(F90) $(F90FLAGS) -c $<

cosp_types.o : cosp_types.F90 cosp_constants.o cosp_utils.o radar_simulator_types.o
	$(F90) $(F90FLAGS) -c  $<

cosp_utils.o : cosp_utils.F90 cosp_constants.o
	$(F90) $(F90FLAGS) -c  $<

dsd.o : dsd.f90 array_lib.o math_lib.o
	$(F90) $(F90FLAGS) -c $<

format_input.o : format_input.f90 array_lib.o
	$(F90) $(F90FLAGS) -c $<

gases.o : gases.f90
	$(F90) $(F90FLAGS) -c $<

icarus.o : icarus.f90
	$(F90) $(F90FLAGS_fixed) -c $<

lidar_simulator.o : lidar_simulator.F90
	$(F90) $(F90FLAGS) -c $<

llnl_stats.o : llnl_stats.F90 cosp_constants.o
	$(F90) $(F90FLAGS) -c $<

lmd_ipsl_stats.o : lmd_ipsl_stats.F90 llnl_stats.o
	$(F90) $(F90FLAGS) -c $<

load_hydrometeor_classes.o : load_hydrometeor_classes.f90 radar_simulator_types.o
	$(F90) $(F90FLAGS) -c $<

math_lib.o : math_lib.f90 array_lib.o mrgrnk.o
	$(F90) $(F90FLAGS) -c $<

MISR_simulator.o : MISR_simulator.f90
	$(F90) $(F90FLAGS_fixed) -c $<

modis_simulator.o : modis_simulator.F90 cosp_types.o abortutils.o
	$(F90) $(F90FLAGS) -c $<

mrgrnk.o : mrgrnk.f90
	$(F90) $(F90FLAGS_noauto) -c $<

optics_lib.o : optics_lib.f90
	$(F90) $(F90FLAGS) -c $<

pf_to_mr.o : pf_to_mr.f90
	$(F90) $(F90FLAGS_fixed) -c $<

prec_scops.o : prec_scops.f90
	$(F90) $(F90FLAGS_fixed) -c $<

radar_simulator_types.o : radar_simulator_types.f90 array_lib.o math_lib.o mrgrnk.o optics_lib.o radar_simulator_types.o
	$(F90) $(F90FLAGS) -c $<

radar_simulator.o : radar_simulator.f90 array_lib.o math_lib.o mrgrnk.o optics_lib.o radar_simulator_types.o
	$(F90) $(F90FLAGS) -c $<

scops.o : scops.f90
	$(F90) $(F90FLAGS_fixed) -c $<

zeff.o : zeff.f90 math_lib.o optics_lib.o
	$(F90) $(F90FLAGS) -c $<

endif

CONFIG_ARGS :=

ifeq ($(MODEL),mct)
        #add arguments for mct configure here
  CONFIG_ARGS += FC="$(FC)" F90="$(FC)" FFLAGS="$(FFLAGS)" CC="$(CC)" --host=Linux 
endif

ifeq ($(MODEL),pio)
  ifneq ($(strip $(PIO_CONFIG_OPTS)),)
    CONFIG_ARGS += $(PIO_CONFIG_OPTS)
  endif 
  CONFIG_ARGS += MPICC="$(CC)" CC="$(CC)" FC="$(FC)" MPIF90="$(FC)" F90="$(FC)" NETCDF_PATH="$(NETCDF_PATH)" FFLAGS="$(FFLAGS)" --host=Linux --enable-filesystem-hints=lustre 
endif


