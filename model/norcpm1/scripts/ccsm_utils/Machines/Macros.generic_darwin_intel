#===============================================================================
# The following always need to be set
# SPMD             Whether to build in SPMD mode or not.  [values TRUE FALSE]
# SMP              Set to TRUE to enable building in SMP mode (uses OpenMP).  
# USER_CPPDEFS     CPP definitions (non platform dependent)
#
#===============================================================================

# Note that CPPDEFS is set in Macros.cppdefs
CPPDEFS += -DLINUX -DDarwin -DSEQ_$(FRAMEWORK) -DFORTRANUNDERSCORE -DNO_R16 -DNO_SHR_VMATH 

ifeq ($(compile_threaded), true)
   CPPDEFS += -DTHREADED_OMP
endif

ifeq ($(USE_MPISERIAL),TRUE)
   FC            := ifort
   CC            := icc
else
   FC            := mpif90
   CC            := mpicc
endif

#=====================================================
# GENERIC_USER
# The netcdf and mpi paths need to be set somewhere.  In CESM, this
# is normally done by setting the NETCDF_PATH and MPICH_PATH
# variables in this Macros file.  But they could also be set in the 
# default user paths, by an explicit addition to the local path 
# in the env_mach_specific file, or via setting NETCDF_PATH 
# and MPICH_PATH environment variables in the env_mach_specific file.  
# Also, review the relative paths of the INC_, LIB_, and MOD_ paths
# below.  Ignore PNETCDF stuff initially, it's not required.

ifeq ($(strip $(NETCDF_PATH)),)
   NETCDF_PATH   := /usr/local/netcdf-3.6.3-intel-3.2.02
endif
INC_NETCDF    := $(NETCDF_PATH)/include
LIB_NETCDF    := $(NETCDF_PATH)/lib
MOD_NETCDF    := $(NETCDF_PATH)/include
ifeq ($(strip $(MPICH_PATH)),)
   MPICH_PATH := /usr/local/mpich-1.2.7p1-intel-3.2.02
endif
ifeq ($(USE_MPISERIAL),TRUE)
   INC_MPI    := $(CODEROOT)/utils/mct/mpi-serial
   LIB_MPI    := 
else
   LIB_MPI    := $(MPICH_PATH)/lib
   INC_MPI    := $(MPICH_PATH)/include
endif
MPI_LIB_NAME  := mpich
PNETCDF_PATH  :=
INC_PNETCDF   :=
LIB_PNETCDF   := 
LAPACK_LIBDIR := 
#=====================================================

CFLAGS        := $(CPPDEFS) -m64 -gdwarf-2 -O2
FIXEDFLAGS    := -132 
FREEFLAGS     := -FR
FFLAGS        := $(CPPDEFS) -g -fp-model precise -convert big_endian \
		  -assume byterecl -ftz -traceback -m64
FFLAGS_NOOPT  := $(FFLAGS) -O0
FFLAGS_OPT    := -O2
LDFLAGS       := -m64
AR            := ar
MOD_SUFFIX    := mod
CONFIG_SHELL  :=

#===============================================================================
# Set include paths (needed after override for any model specific builds below)
#===============================================================================

INCLDIR := -I. 
ifneq ($(strip $(INC_NETCDF)),)
INCLDIR += -I$(INC_NETCDF)
endif
ifneq ($(strip $(MOD_NETCDF)),)
INCLDIR += -I$(MOD_NETCDF)
endif
ifneq ($(strip $(INC_MPI)),)
INCLDIR += -I$(INC_MPI)
endif 
ifneq ($(strip $(INC_PNETCDF)),)
INCLDIR += -I$(INC_PNETCDF)
endif
INCLDIR += -I/usr/include/malloc

#===============================================================================
# Set model and other specific options
# NOTE - all CPPDEFS options must be defined before this point
#===============================================================================

ifeq ($(DEBUG),TRUE)
  FFLAGS       += -CU -fp-stack-check -check uninit -check bounds \
		  -fpe0 -ftz -debug -ftrapuv
  FFLAGS_NOOPT += -CU -fp-stack-check -check uninit -check bounds \
		  -fpe0 -ftz -debug -ftrapuv
else
  FFLAGS += $(FFLAGS_OPT)
endif

ifeq ($(compile_threaded), true)
  FFLAGS       += -openmp
  FFLAGS_NOOPT += -openmp
  CFLAGS       += -openmp
  LDFLAGS      += -openmp
endif

ifeq ($(strip $(MODEL)),cam)
# These RRTMG files cause a compiler error when using optimization.
# Until mods are made to read the data from files, just remove optimization from
# their compilation.
rrtmg_lw_k_g.o: rrtmg_lw_k_g.f90
	$(FC) -c $(CPPDEFS) $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS_NOOPT) $<
rrtmg_sw_k_g.o: rrtmg_sw_k_g.f90
	$(FC) -c $(CPPDEFS) $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS_NOOPT) $<
endif

#=====================================================
# GENERIC_USER
# Options passed to the mct and pio build are set here

ifeq ($(MODEL),mct)
        #add arguments for mct configure here
  CONFIG_ARGS += CC="$(CC)" FC="$(FC)" F90="$(FC)" INCLUDEPATH="-I$(INC_MPI)"
endif

ifeq ($(MODEL),pio)
  ifneq ($(strip $(PIO_CONFIG_OPTS)),)
    CONFIG_ARGS += $(PIO_CONFIG_OPTS)
  endif 
  CONFIG_ARGS += CC="$(CC)" F90="$(FC)" NETCDF_PATH="$(NETCDF_PATH)" MPI_INC="-I$(INC_MPI)"
endif

ifeq ($(strip $(MODEL)),cesm_lib)
gptl.o: gptl.c
	$(CC) -c -I/usr/include/machine $(CFLAGS) $<
endif
ifeq ($(strip $(MODEL)),csm_share)
gptl.o: gptl.c
	$(CC) -c -I/usr/include/machine $(CFLAGS) $<
endif

# ----------------------------------------------------------------------
# Load all of the libraries so you don't end up with undefined externals
# at the link step. EBK Dec/2010
# This is a horrible way to do this, but I couldn't get the library load to
# work. I tried running ranlib on the libraries as well and that didn't help.
# Hopefully, at some point in the future these settings of ULIBS and CLIBS
# could be removed.
ifeq ($(strip $(MODEL)),driver)

   ULIBS   := -all_load $(LIBROOT)/libcsm_share.a -all_load $(LIBROOT)/libmct.a \
              -all_load $(LIBROOT)/libmpeu.a -all_load $(LIBROOT)/libpio.a
   CLIBS   := -all_load $(LIBROOT)/libatm.a -all_load $(LIBROOT)/liblnd.a \
              -all_load $(LIBROOT)/libice.a -all_load $(LIBROOT)/libocn.a \
              -all_load $(LIBROOT)/libglc.a
   ifeq ($(USE_MPISERIAL),TRUE)
      ULIBS += -all_load $(LIBROOT)/libmpi-serial.a
   endif

endif
# ----------------------------------------------------------------------

#=====================================================

